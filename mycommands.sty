\ProvidesPackage{mycommands}%
% Misc useful commands, a lot for svg includegraphics from inkscape and dot
%
% 2009-2013 (c) Ioannis Filippidis, jfilippidis@gmail.com

\usepackage{xifthen}
\usepackage{forloop}
\usepackage{xkeyval}
\usepackage{adjustbox}

%=================
% Figures
%=================
\def \figwidth{0.7\textwidth}% 0.7 x 16.5cm = 115.5mm
\def \annotfigwidth{100mm}% annotated (raster) figure width
\def \annotwidth{165mm}% annotations within this width (set equal to textwidth 165mm)
\def \matlabfigwidth{0.8\textwidth}%

\def\figureautorefname{Fig.}% in front of figure's \autoref
%\newcommand{\subfigureautorefname}{Fig.}% when not defined by hyperref, newcommand is used instead of \def
\newcommand{\algorithmautorefname}{Algorithm}%

%-------------------------------------------
% wrapper for subfigure environment of package subcaption
%-------------------------------------------
\makeatletter
\@ifpackageloaded{subcaption}{%
	\def\defaultSubfigWidth{0.9\textwidth}
	\newcommand{\subfig}[2][\defaultSubfigWidth]{
		\begin{subfigure}{#1}
			\centering
			#1
		\end{subfigure}
	}
}%
\makeatother

%-------------------------------------------
% SINGLE FIGURE
%-------------------------------------------
% \myfig{file}{caption}{width or left empty}{label}
%
% figure with [width]{file}, caption, fig:label
\newcommand{\myfig}[4]{%
	\begin{figure}%
		\centering%
		\ifthenelse{\isempty{#3}}{%
			\includegraphics{#1}%
		}{%
			\includegraphics[width=#3]{#1}%
		}%
		\caption{#2}%
		\label{fig:#4}%
	\end{figure}%
}%

%-------------------------------------------
% MULTIPLE FIGURES
%-------------------------------------------
% \figs{i_min}{i_max}{width}{filename}{extension}{caption}
%
% width = desired graphics width, the same for all
%         (e.g. 0.8\textwidth)
% filename = file name without extension
% extension = file name extension
%             (e.g. pdf)
%
% for i=(i_min) :(i_max -1)
%    figure with ''filename''i''extension''
\newcounter{ct}%
\newcounter{b}%

\newcommand{\figs}[6]{%
	\forloop{ct}{#1}{\value{ct} < #2}{%
		\begin{figure}%
			\centering%
			\ifthenelse{\isempty{#3}}{%
				\includegraphics{#4\arabic{ct}#5}%
			}{%
				\includegraphics[width=#3]{#4\arabic{ct}#5}%
			}%
			\caption{#6}%
			\label{fig:#4\arabic{ct}}%
		\end{figure}%
	}%
}%

%-------------------------------------------
% MULTIPLE IMAGES
%-------------------------------------------
% (e.g. in single figure, you choose)
%
% \multincludegraphics[min=1,max=3,perline=1,width=0.5\textwidth,ext=pdf,subfig]{filename}
%
% @param min: minimal index
% @param max: maximal index
% @param perline: #figs side-by-side on each line
% @param width: includegraphics with, e.g. \textwidth
% @param ext: file extension including period, for example: .pdf
% @param subfig: make images subfigures
% @param filename: file path without extension
\makeatletter
\define@boolkey{figs}{subfig}[true]{}%
\define@key{figs}{min}{%
	\def\ctmin{#1}
}
\define@key{figs}{max}{%
	\def\ctmax{#1}%
}
\define@key{figs}{perline}{%
	\def\perline{#1}%
}
\define@key{figs}{width}{%
	\def\myfigwidth{#1}%
}
\define@key{figs}{ext}{%
	\def\myextension{#1}%
}
%
\savekeys{figs}{fit,min,max,perline,width,ext}
%
\presetkeys{figs}{%
	min=0,
	max=1,
	perline=1,
	width=\textwidth,
	ext=.pdf,
	subfig=true
}{}
%
\newcounter{linectr}%
\newcommand\multincludegraphics[2][]{%
	\setkeys{figs}{#1}{
		\setcounter{linectr}{0}%
		\forloop{ct}{\ctmin}{\not{\value{ct} > \ctmax}}{%
			\stepcounter{linectr}%
			%filename enclosed by {} to avoid issues with periods
			\def\imgfile{{#2\arabic{ct}\myextension}}%
			\ifKV@figs@subfig
				\ifthenelse{\isempty{\myfigwidth}}{%
					\begin{subfigure}{\textwidth}
				}{%
					\begin{subfigure}{\myfigwidth}
				}%
					\includegraphics[width=\textwidth]{\imgfile}%
					\caption{}%to show the (a), (b) etc
					\label{subfig:#2\arabic{ct}}%
				\end{subfigure}
			\else
				\ifthenelse{\isempty{\myfigwidth}}{%
					\includegraphics{\imgfile}%
				}{%
					\includegraphics[width=\myfigwidth]{\imgfile}%
				}%
			\fi
			\ifthenelse{\cnttest{\value{linectr}}={\perline}}{%
				\\%
				\setcounter{linectr}{0}%
			}{%
				\hfill
			}%
		}%
	}
}%
\makeatother

%-------------------------------------------
% SINGLE SVG to PDF + LaTeX
%-------------------------------------------
% \includesvg[width=0.5\textwidth]{relative_path}
% \includesvg[width=0.5\textwidth,tex]{relative_path}
% \includesvg[width=0.5\textwidth,tex=true]{relative_path}
%
%	or
%
% \includesvg[width=0.5\textwidth,tex=false]{filename}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to .pdf and include .pdf_tex which inputs the produced .pdf
\makeatletter
\define@boolkey{svg}{tex}[true]{}%
\define@key{svg}{width}{%
	\def\svgwidth{#1}
}
\savekeys{svg}{width}
\presetkeys{svg}{%
	width=\textwidth,
	tex=true
}{}

\newcommand\includesvg[2][]{%
	\setkeys{svg}{#1}{
		\ifKV@svg@tex%
			\immediate\write18{inkscape2tex.py -i #2 -m latex-pdf}%
			\ifthenelse{\isempty{\svgwidth}}{%
				\global\let\svgwidth\undefined%
			}{%
				%
			}%
			\IfFileExists{#2.pdf_tex}{%
				\input{#2.pdf_tex}%
			}{%
				{\color{red} FILE #2.pdf_tex NOT FOUND.}%
			}%
		\else%
			\immediate\write18{inkscape2tex.py -i #2 -m pdf}%
			\ifx#1\undefined%
				\includegraphics{#2.pdf}%
			\else%
				\includegraphics[width=\svgwidth]{#2.pdf}%
			\fi%
		\fi%
	}%
}%
\makeatother

%-------------------------------------------
% Wrapper for SVG w/o latex
%-------------------------------------------
% \includesvgpdf[width=0.9\textwidth]{filename}
%
% filename = SVG file name without any extension
%
% export .svg to .pdf and include the produced .pdf
\newcommand{\includesvgpdf}[2][\undefined]{%
	\includesvg[#1,tex=false]{#2}%
}%

%-------------------------------------------
% MULTIPLE SVGs (inside common figure env)
%-------------------------------------------
% \includesvgs[min=1,max=3,perline=1,width=\textwidth,fit]{filename}
%
% width = e.g. \textwidth
% filename = svg path without extension
%
% for i=(i_min) :(i_max -1)
%    figure with ''filename''i''extension''
\makeatletter
\define@boolkey{svgs}{subfig}[true]{}%

\define@boolkey{svgs}{fit}[true]{}%
\define@key{svgs}{min}{%
	\def\ctmin{#1}
}
\define@key{svgs}{max}{%
	\def\ctmax{#1}
}
\define@key{svgs}{perline}{%
	\def\perline{#1}
}
\define@key{svgs}{width}{%
	\def\mysvgwidth{#1}
}
\savekeys{svgs}{fit,min,max,perline,width}

\presetkeys{svgs}{%
	min=0,
	max=1,
	perline=1,
	width=\textwidth,
	subfig=true
}{}

\newcommand\includesvgs[2][]{%
	\setkeys{svgs}{#1}{
		\setcounter{linectr}{0}%
		\forloop{ct}{\ctmin}{\value{ct} < \ctmax}{%
			\stepcounter{linectr}%
			
			\ifKV@svgs@fit
				\begin{adjustbox}{max size={\textwidth}{\textheight}}
					\includesvg{#2\arabic{ct}}%
				\end{adjustbox}
			\else
				\ifKV@svgs@subfig
					\ifthenelse{\isempty{\mysvgwidth}}{%
						\begin{subfigure}{\textwidth}%
					}{%
						\begin{subfigure}{\mysvgwidth}%
					}%
					%
					\includesvg[width=\textwidth]{#2\arabic{ct}}%%
					\caption{}%to show the (a), (b) etc
					\label{subfig:#2\arabic{ct}}%
					\end{subfigure}
				\else
					\ifthenelse{\isempty{\mysvgwidth}}{%
						\includesvg{#2\arabic{ct}}%
					}{%
						\includesvg[width=\mysvgwidth]{#2\arabic{ct}}%
					}%
				\fi
			\fi
			\ifthenelse{\cnttest{\value{linectr}}={\perline}}{%
				\\%
				\setcounter{linectr}{0}%
			}{%
				%
			}%
		}%
	}
}%
\makeatother

%-------------------------------------------
% SINGLE SVG FIGURE
%-------------------------------------------
% \myfigsvg{path}{caption}{width}{label}
%
% path = relative path w/o extension to .svg file w/o .pdf_tex extension
% width = width (e.g. 0.9\textwidth) | empty argument
%
% figure with [width]{svgfile}, caption, fig:label
\newcommand{\myfigsvg}[4]{%
	\begin{figure}%
		\centering%
		\ifthenelse{\isempty{#3}}{%
			\includesvg{#1}%
		}{%
			\includesvg[width=#3]{#1}%
		}%
		\caption{#2}%
		\label{fig:#4}%
	\end{figure}%
}%

%-------------------------------------------
% BEAMER SEQUENCE OF SUPERIMPOSED FIGURES
%-------------------------------------------
% \slideshow{}{i_max}{width}{filename w/o extension}{extension}
%
% beamer
% figure with superimposed
% for i=1 :(i_max -1)
%    ''filename''i''extension''
\newcommand{\slideshow}[5]{%
	\begin{figure}%
		\centering%
		\setcounter{ct}{0}%
		\includegraphics<\arabic{ct}->[width=#3]{#4\arabic{ct}#5}%
		\forloop{ct}{1}{\value{ct} < #2}{%
			\llap{\includegraphics<\arabic{ct}>[width=#3]{#4\arabic{ct}#5}}%
		}%
	\end{figure}%
}%

%-------------------------------------------
% BAEAMER: STACKED DOT2TEX GRAPHS
%-------------------------------------------
%
% \animatedot[dot2tex options]{5}{./img/mynice}
%
% 5 = max counter - 1
% mynice0.dot, ..., mynice4.dot
%
\newcommand{\animatedot}[3][]{%
\begin{overprint}%
	\setcounter{ct}{0}%
	\forloop{ct}{0}{\value{ct} < #2}{%
		\setcounter{b}{\value{ct}}%
		\addtocounter{b}{1}%
		\only<\arabic{b}>{%
			\includedottex[#1]{#3\arabic{ct}.dot}%
		}%
	}%
\end{overprint}%
}%

%-------------------------------------------
% BEAMER LAYERED FIGURE
%-------------------------------------------
% \includesvglayer[width]{1-2,3-4,5,6}{relative_path}
%
% width = 0.9\textwidth (for example)
% layers2slides = arguments of \onslide<>, e.g. 1-2,3-4,5,6
%                 these are issued by the python script
% path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to multiple .pdf all layer combinations specified within .svg
% and include .pdf_tex produced by python script, which includes individual .pdf_tex files
\newcommand{\includesvglayer}[3][\undefined]{%
	\only<1>{%
		\ifx#1\undefined%
			\immediate\write18{inkscape2scenes.py --scene-order=#2 --file=#3 --overprint=True}%
		\else%
			\immediate\write18{inkscape2scenes.py --width=#1 --scene-order=#2 --file=#3 --overprint=True}%
		\fi%
	}%
	\input{#3.pdf_tex}%
}%

\newcommand{\includesvglayerbare}[3][\undefined]{%
		\ifx#1\undefined%
			\immediate\write18{inkscape2scenes.py --scene-order=#2 --file=#3}%
		\else%
			\immediate\write18{inkscape2scenes.py --width=#1 --scene-order=#2 --file=#3}%
		\fi%
	\input{#3.pdf_tex}%
}%

%-------------------------------------------
% SINGLE DOT
%-------------------------------------------
% \includedot[width]{relative_path}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to DOT file, without its extension
%
% export for LaTeX .dot to .svg then to .pdf and
% include .pdf_tex which inputs the produced .pdf
\newcommand{\includedot}[2][\undefined]{%
	%\immediate\write18{dot #2.dot -Tsvg -o #2.svg}%
	%\includesvg[#1]{#2}%
	%
	\immediate\write18{inkscape2tex.py -i #2 -m dot-svg-latex-pdf}%
	\ifx#1\undefined%
		\global\let\svgwidth\undefined%
	\else%
		\def\svgwidth{#1}%
	\fi%
	\IfFileExists{#2.pdf_tex}{%
		\input{#2.pdf_tex}%
	}{%
		{\color{red} FILE #2.pdf_tex NOT FOUND.}%
	}%
}%

%-------------------------------------------
% SINGLE SVG to EPS + LaTeX
%-------------------------------------------
% \includeps[width]{relative_path}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to .pdf and include .pdf_tex which inputs the produced .pdf
\newcommand{\includeps}[2][\undefined]{%
	\immediate\write18{inkscape2tex.py -i #2 -m latex-eps}%
	\ifx#1\undefined%
		\global\let\svgwidth\undefined%
	\else%
		\def\svgwidth{#1}%
	\fi%
	\IfFileExists{#2.eps_tex}{%
		\input{#2.eps_tex}%
	}{%
		{\color{red} FILE #2.eps_tex NOT FOUND.}%
	}%
}%

%-------------------------------------------
% SINGLE SVG to EPS
%-------------------------------------------
% \includesvgeps[width=0.9\textwidth]{filename}
%
% filename = SVG file name without any extension
%
% export .svg to .pdf and include the produced .pdf
\newcommand{\includesvgeps}[2][\undefined]{%
	\immediate\write18{inkscape2tex.py -i #2 -m eps}%
	\ifx#1\undefined%
		\includegraphics{#2.eps}%
	\else%
		\includegraphics[#1]{#2.eps}%
	\fi%
}%

%=================
% General Commands
%=================
\providecommand{\mycode}[1]{\texttt{#1}}% code file names style
\def\myparbreak{12pt}% spacing between paragraphs when needed % \vspace{\myparbreak}
\def\myparbrk{\vspace{12pt}}%

%=================
% Paths
%=================
\def\mybibpath{../../bib/}%
\def\mymatlabpath{../../../MATLAB/}%
\def\myavrgccpath{../../../C/avr-gcc-projects/}%
\def\mygccpath{../../../C/gcc-projects/}%

%=================
% Mathematics
%=================
\newcommand{\myvec}[1]{\mathbf{#1}}%
\newcommand{\myvecgr}[1]{\boldsymbol{#1}}%
\newcommand{\mymatr}[1]{\mathrm{#1}}%

\providecommand{\abs}[1]{\left\lvert#1\right\rvert}%
\providecommand{\norm}[1]{\left\|#1\right\|}% \rVert was reviously used
\newcommand{\inner}[3][\undefined]{%
\ifx#1\undefined%
	\left\langle#2,\;#3\right\rangle%
\else%
	\left\langle#2,\;#3\right\rangle_{#1}%
\fi%
}%
\newcommand{\dinner}[3][\undefined]{%
\ifx#1\undefined%
	\left\langle\left\langle#2,\;#3\right\rangle\right\rangle%
\else%
	\left\langle#2,\;#3\right\rangle_{#1}%
\fi%
}%
\DeclareMathOperator*{\cart}{\times}

\newcommand{\transpose}{^\mathrm{T}}%
\newcommand{\tr}{\transpose}%shortcut for transpose command
\newcommand{\trace}[1]{\mathrm{tr}\left(#1\right)}%shortcut

\newcommand{\booleans}{\mathbb{B}}%
\newcommand{\naturals}{\mathbb{N}}%
\newcommand{\integers}{\mathbb{Z}}%
\newcommand{\rationals}{\mathbb{Q}}%
\newcommand{\irrationals}{\reals\setminus\rationals}%
\newcommand{\complexes}{\mathbb{C}}%
\newcommand{\reals}{\mathbb{R}}%
\newcommand{\lspan}[1]{\mathrm{span}\left\{#1\right\}}%
\newcommand{\mspan}[1]{\mathrm{muspan}\left\{#1\right\}}%
\newcommand{\sgn}[1]{\mathrm{sgn}\left\{#1\right\}}%
\newcommand{\floor}[1]{\left\lfloor#1\right\rfloor}%
\newcommand{\ceil}[1]{\left\lceil#1\right\rceil}%

\newcommand{\mat}[1]{%
\begin{bmatrix}%
#1%
\end{bmatrix}%
}

\newcommand{\sumi}[2][n]{\sum_{i=1}^{#1}\left(#2\right)}%
\newcommand{\sumj}[2][n]{\sum_{j=1}^{#1}\left(#2\right)}%
\newcommand{\sumk}[2][n]{\sum_{k=1}^{#1}\left(#2\right)}%

%----------------------------------------------
\newcommand{\myeq}[2][\undefined]{%
	\ifx#1\undefined%
		\begin{equation}%
			\begin{aligned}%
				#2%
			\end{aligned}%
		\end{equation}%
	\else%
		\begin{equation*}%
			\begin{aligned}%
				#2%
			\end{aligned}%
		\end{equation*}%
	\fi%
}%
%----------------------------------------------

% theorem environments
%\def\coloredthm{1}

\ifx\beamerbutton\undefined%
	\ifx\coloredthm\undefined%
		%
		% Just using amsmath
		\newtheorem{definition}{Definition}%
		\newtheorem{problem}[definition]{Problem}%
		\newtheorem{proposition}[definition]{Proposition}%
		\newtheorem{lemma}[definition]{Lemma}%
		\newtheorem{theorem}[definition]{Theorem}%
		\newtheorem{corollary}[definition]{Corollary}%
		\newtheorem{remark}[definition]{Remark}%
		\newtheorem{assumption}[definition]{Assumption}%
	\else%
		\usepackage{thmtools}%
		\declaretheorem[name=Definition,shaded={bgcolor=YellowGreen}]{definition}
		\declaretheorem[name=Proposition,sibling=definition,shaded={bgcolor=Yellow}]{proposition}
		\declaretheorem[name=Lemma,sibling=definition,shaded={bgcolor=YellowOrange!50}]{lemma}
		\declaretheorem[name=Theorem,sibling=definition,shaded={bgcolor=Melon}]{theorem}
		\declaretheorem[name=Corollary,sibling=definition,shaded={bgcolor=Cyan!30}]{corollary}
		\declaretheorem[name=Remark,sibling=definition]{remark}
		\declaretheorem[name=Assumption,sibling=definition,shaded={bgcolor=Red!40}]{assumption}
	\fi%
\else%
	\definecolor{YellowGreen}{rgb}{0.6,0.8,0.2}
	\definecolor{Melon}{rgb}{1.0,0.74,0.7}
	
%	\let\OLDdefinition=\definition
%	\def\definition{%
%		\setbeamercolor{block title}{fg=white,bg=YellowGreen!50!black}%
%		\setbeamercolor{block body}{fg=black,bg=YellowGreen!20}\OLDdefinition
%	}
%	
%	\let\OLDlemma=\lemma
%	\def\lemma{%
%		\setbeamercolor{block title}{fg=white,bg=Melon!50!black}%
%		\setbeamercolor{block body}{fg=black,bg=Melon!20}\OLDlemma
%	}
%	
%	\let\OLDtheorem=\theorem
%	\def\theorem{%
%		\setbeamercolor{block title}{fg=white,bg=orange!50!black}%
%		\setbeamercolor{block body}{fg=black,bg=orange!20}\OLDtheorem
%	}
%	
%	\let\OLDcorollary=\corollary
%	\def\corollary{%
%		\setbeamercolor{block title}{fg=white,bg=cyan!50!black}%
%		\setbeamercolor{block body}{fg=black,bg=cyan!30}\OLDcorollary
%	}

	\let\definition\relax
	\newenvironment<>{definition}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Definition}%
	\else%
		\def\insertblocktitle{Definition ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=YellowGreen!50!black}%
		\setbeamercolor{block body}{fg=black,bg=YellowGreen!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
	
	
	\newenvironment<>{assumption}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Assumption}%
	\else%
		\def\insertblocktitle{Assumption ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=red!50!black}%
		\setbeamercolor{block body}{fg=black,bg=red!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
	
	\newenvironment<>{proposition}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Proposition}%
	\else%
		\def\insertblocktitle{Proposition ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=yellow!50!black}%
		\setbeamercolor{block body}{fg=black,bg=yellow!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}

	\let\lemma\relax
	\newenvironment<>{lemma}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Lemma}%
	\else%
		\def\insertblocktitle{Lemma ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=Melon!50!black}%
		\setbeamercolor{block body}{fg=black,bg=Melon!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
	
	\let\theorem\relax
	\newenvironment<>{theorem}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Theorem}%
	\else%
		\def\insertblocktitle{Theorem ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=orange!50!black}%
		\setbeamercolor{block body}{fg=black,bg=orange!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
	
	\let\corollary\relax
	\newenvironment<>{corollary}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Corollary}%
	\else%
		\def\insertblocktitle{Corollary ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=cyan!50!black}%
		\setbeamercolor{block body}{fg=black,bg=cyan!30}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
	
	\newenvironment<>{remark}[1][\undefined]{%
	\begin{actionenv}#2%
	\ifx#1\undefined%
		\def\insertblocktitle{Remark}%
	\else%
		\def\insertblocktitle{Remark ({\em#1})}%
	\fi%
	\par%
	\mode<presentation>{%
		\setbeamercolor{block title}{fg=white,bg=red!50!black}%
		\setbeamercolor{block body}{fg=black,bg=red!20}%
	}%
	\usebeamertemplate{block begin}}
	{\par\usebeamertemplate{block end}\end{actionenv}}
\fi%

\newcommand{\asslab}[1]{\label[assumption]{#1}}%
\newcommand{\deflab}[1]{\label[definition]{#1}}%
\newcommand{\prolab}[1]{\label[proposition]{#1}}%
\newcommand{\lemlab}[1]{\label[lemma]{#1}}%
\newcommand{\thelab}[1]{\label[theorem]{#1}}%
\newcommand{\corlab}[1]{\label[corollary]{#1}}%
\newcommand{\remlab}[1]{\label[remark]{#1}}%

%=========================================
% Example Usage of theoremstyles in beamer
%=========================================
%\begin{frame}{Testing theoremstyles 1}{custom}
%	\begin{definition}[one]
%		hello
%	\end{definition}
%	
%	\begin{assumption}[two]
%		hello
%	\end{assumption}
%	
%	\begin{proposition}[three]
%		hello
%	\end{proposition}
%\end{frame}
%
%\begin{frame}{Testing theoremstyles 2}{custom}
%	\begin{lemma}[four]
%		hello
%	\end{lemma}
%	
%	\begin{theorem}[five]
%		hello
%	\end{theorem}
%	
%	\begin{corollary}[six]
%		hello
%	\end{corollary}
%
%	\begin{remark}[seven]
%		hello
%	\end{remark}
%\end{frame}
%=========================================

% theorem environments with common numbering
\usepackage[capitalize]{cleveref}

% fix ref auto-naming
\crefname{definition}{Definition}{Definitions}%
\crefname{problem}{Problem}{Problems}%
\crefname{proposition}{Proposition}{Propositions}%
\crefname{theorem}{Theorem}{Theorems}%
\crefname{lemma}{Lemma}{Lemmas}%
\crefname{corollary}{Corollary}{Corollaries}%
\crefname{remark}{Remark}{Remarks}%
\crefname{assumption}{Assumption}{Assumptions}%

% theorem autoref
%\def\definitionautorefname{Definition}%
%\def\propositionautorefname{Proposition}%
%\def\theoremautorefname{Theorem}%
%\def\lemmaautorefname{Lemma}%
%\def\remarkautorefname{Remark}%

\crefname{figure}{Fig.}{Figs.}%
\crefname{subfigure}{Fig.}{Figs.}%

%===================================================
% Some colored box definitions for beamer
\ifx\beamerbutton\undefined%
	%
\else%
	\definecolor{myblue}{rgb}{0.85, 0.89, 0.94}
	\definecolor{question}{rgb}{.99,.77,.81}
	\definecolor{mybrown}{rgb}{.86,.85,.76}
	\definecolor{mygreen}{rgb}{.83,.89,.74}
	\definecolor{myyellow}{rgb}{.96,.97,.58}
	\definecolor{mywhite}{rgb}{1.0,1.0,.79}
	%
	\setbeamercolor{question}{fg=black,bg=question}
	\setbeamercolor{myblue}{fg=black,bg=myblue}
	\setbeamercolor{mybrown}{fg=black,bg=mybrown}
	\setbeamercolor{answer}{fg=black,bg=mygreen}
	\setbeamercolor{mygreen}{fg=black,bg=mygreen}
	\setbeamercolor{myyellow}{fg=black,bg=myyellow}
	%
	\setbeamercolor{block title}{bg=white!90!black,fg=blue}
	\setbeamercolor{block body}{bg=white!95!black,fg=black}
\fi%

%===================================================
\makeatletter
\@ifpackageloaded{listings}{%
	% source code formatting (CAUTION: listings != listing package)
	
	% Default fixed font does not support bold face
	\DeclareFixedFont{\ttb}{T1}{txtt}{bx}{n}{12} % for bold
	\DeclareFixedFont{\ttm}{T1}{txtt}{m}{n}{12}  % for normal
	
	% Custom colors
	\usepackage{color}
	\definecolor{deepblue}{rgb}{0,0,0.5}
	\definecolor{deepred}{rgb}{0.6,0,0}
	\definecolor{deepgreen}{rgb}{0,0.5,0}
	
	\newfontfamily{\couriernew}{Courier New}
	
	\newcommand\cstyle{\lstset{%
		language=C,% choose the language of the code
		basicstyle=\footnotesize,% the size of the fonts that are used for the code
		numbers=left,% where to put the line-numbers
		numberstyle=\footnotesize,% the size of the fonts that are used for the line-numbers
		stepnumber=2,% the step between two line-numbers. If it's 1 each line will be numbered
		numbersep=5pt,% how far the line-numbers are from the code
		backgroundcolor=\color{white},% choose the background color. You must add \usepackage{color}
		showspaces=false,% show spaces adding particular underscores
		showstringspaces=false,% underline spaces within strings
		showtabs=false,% show tabs within strings adding particular underscores
		%frame=single,% adds a frame around the code
		tabsize=4,% sets default tabsize to 2 spaces
		captionpos=b,% sets the caption-position to bottom
		breaklines=true,% sets automatic line breaking
		breakatwhitespace=false,% sets if automatic breaks should only happen at whitespace
		title=\lstname,% show the filename of files included with \lstinputlisting; also try caption instead of title
		escapeinside={\%*}{*)},% if you want to add a comment within your code
		frame=shadowbox,%
		rulesepcolor=\color{blue},%
		keywordstyle=\color[rgb]{0,0,1},%
		commentstyle=\color[rgb]{0.133,0.545,0.133},%
		stringstyle=\color[rgb]{0.627,0.126,0.941}%
	}}%
	
	\newcommand\pythonstyle{\lstset{%
		language=Python,%
		basicstyle=\footnotesize\couriernew,%
		numbers=left,%
		numberstyle=\footnotesize,%
		stepnumber=1,%
		numbersep=5pt,%
		backgroundcolor=\color{white},%
		showspaces=false,%
		showstringspaces=false,%
		showtabs=false,%
		%frame=single,%
		otherkeywords={self},%
		keywordstyle=\ttb\color{deepblue},%
		commentstyle=\color[rgb]{0.133,0.545,0.133},%
		stringstyle=\color[rgb]{0.627,0.126,0.941},%
		%
		emph={MyClass,__init__},%
		emphstyle=\ttb\color{deepred},%
		stringstyle=\color{deepgreen},%
		frame=tb,%
		showstringspaces=false% 
		%
		tabsize=4,% sets default tabsize to 2 spaces
		captionpos=b,% sets the caption-position to bottom
		breaklines=true,% sets automatic line breaking
		breakatwhitespace=false,% sets if automatic breaks should only happen at whitespace
		%title=\lstname,% show the filename of files included with \lstinputlisting; also try caption instead of title
		escapeinside={\%*}{*)},%
		frame=shadowbox,%
		rulesepcolor=\color{blue},%
	}}%
	
	\newcommand\promelastyle{\lstset{%
		language=Promela,%
		basicstyle=\footnotesize\couriernew,%
		numbers=left,%
		numberstyle=\footnotesize,%
		stepnumber=1,%
		numbersep=5pt,%
		backgroundcolor=\color{white},%
		showspaces=false,%
		showstringspaces=false,%
		showtabs=false,%
		%frame=single,%
		otherkeywords={self},%
		keywordstyle=\ttb\color{deepblue},%
		commentstyle=\color[rgb]{0.133,0.545,0.133},%
		stringstyle=\color[rgb]{0.627,0.126,0.941},%
		stringstyle=\color{deepgreen},%
		frame=tb,%
		showstringspaces=false% 
		%
		tabsize=4,%
		captionpos=b,%
		breaklines=true,%
		breakatwhitespace=false,%
		%title=\lstname,%
		escapeinside={\%*}{*)},%
		frame=shadowbox,%
		rulesepcolor=\color{blue},%
	}}%
	
	\newcommand{\matlabstyle}{
		%
	}%
	
	% Python for external files
	\newcommand\inputcode[2][\undefined]{%
		\ifx#1c%
			\cstyle%
		\fi%
		\ifx#1promela%
			\promelastyle%
		\fi%
		\ifx#1python%
			\pythonstyle%
		\fi%
		\ifx#1matlab%
			\matlabstyle%
		\fi%
		\lstinputlisting{#2}%
	}%
}{%
	%skip
}%
\makeatother
