\ProvidesPackage{mycommands}%
% Misc useful commands, a lot for svg includegraphics from inkscape and dot
%
% 2009-2014 (c) Ioannis Filippidis, jfilippidis@gmail.com

\usepackage{xifthen}
\usepackage{forloop}
\usepackage{xkeyval}
\usepackage{adjustbox}
\usepackage{calc}
\usepackage{color}
\usepackage{amsopn}
%\usepackage{fmtcount}

%=================
% Figures
%=================
\def \figwidth{0.7\textwidth}% 0.7 x 16.5cm = 115.5mm
\def \annotfigwidth{100mm}% annotated (raster) figure width
\def \annotwidth{165mm}% annotations within this width (set equal to textwidth 165mm)
\def \matlabfigwidth{0.8\textwidth}%

\def\figureautorefname{Fig.}% in front of figure's \autoref
%\newcommand{\subfigureautorefname}{Fig.}% when not defined by hyperref, newcommand is used instead of \def
\newcommand{\algorithmautorefname}{Algorithm}%

% for algseudocode
\newcommand{\Break}{\textbf{break}}
\newcommand{\Continue}{\textbf{continue}}

%-------------------------------------------
% wrapper for subfigure environment of package subcaption
%-------------------------------------------
\makeatletter
\@ifpackageloaded{subcaption}{%
	\def\defaultSubfigWidth{0.9\textwidth}
	\newcommand{\subfig}[2][\defaultSubfigWidth]{
		\begin{subfigure}{#1}
			\centering
			#1
		\end{subfigure}
	}
}%
\makeatother

%-------------------------------------------
% SINGLE FIGURE
%-------------------------------------------
% \myfig{file}{caption}{width or left empty}{label}
%
% figure with [width]{file}, caption, fig:label
\newcommand{\myfig}[4]{%
	\begin{figure}%
		\centering%
		\ifthenelse{\isempty{#3}}{%
			\includegraphics{#1}%
		}{%
			\includegraphics[width=#3]{#1}%
		}%
		\caption{#2}%
		\label{fig:#4}%
	\end{figure}%
}%

%-------------------------------------------
% MULTIPLE FIGURES
%-------------------------------------------
% \figs{i_min}{i_max}{width}{filename}{extension}{caption}
%
% width = desired graphics width, the same for all
%         (e.g. 0.8\textwidth)
% filename = file name without extension
% extension = file name extension
%             (e.g. pdf)
%
% for i=(i_min) :(i_max -1)
%    figure with ''filename''i''extension''
\newcounter{ct}%
\newcounter{b}%

\newcommand{\figs}[6]{%
	\forloop{ct}{#1}{\value{ct} < #2}{%
		\begin{figure}%
			\centering%
			\ifthenelse{\isempty{#3}}{%
				\includegraphics{#4\arabic{ct}#5}%
			}{%
				\includegraphics[width=#3]{#4\arabic{ct}#5}%
			}%
			\caption{#6}%
			\label{fig:#4\arabic{ct}}%
		\end{figure}%
	}%
}%

%-------------------------------------------
% MULTIPLE IMAGES
%-------------------------------------------
% (e.g. in single figure, you choose)
%
% \multincludegraphics[min=1,max=3,perline=1,width=0.5\textwidth,ext=pdf,subfig]{filename}
%
% @param min: minimal index
% @param max: maximal index
% @param perline: #figs side-by-side on each line
% @param width: includegraphics with, e.g. \textwidth
% @param ext: file extension including period, for example: .pdf
% @param subfig: make images subfigures
% @param filename: file path without extension
\makeatletter
\define@boolkey{figs}{subfig}[true]{}%
\define@key{figs}{min}{%
	\def\ctmin{#1}
}
\define@key{figs}{max}{%
	\def\ctmax{#1}%
}
\define@key{figs}{perline}{%
	\def\perline{#1}%
}
\define@key{figs}{width}{%
	\def\myfigwidth{#1}%
}
\define@key{figs}{ext}{%
	\def\myextension{#1}%
}
%
\savekeys{figs}{min,max,perline,width,ext}
%
\presetkeys{figs}{%
	min=0,
	max=1,
	perline=1,
	ext=.pdf,
	subfig=true
}{}
%
\newcounter{linectr}%
\newcommand\multincludegraphics[2][]{%
	\setkeys{figs}{#1}{
		\setcounter{linectr}{0}%
		\forloop{ct}{\ctmin}{\not{\value{ct} > \ctmax}}{%
			\stepcounter{linectr}%
			%filename enclosed by {} to avoid issues with periods
			\def\imgfile{{#2\arabic{ct}\myextension}}%
			\ifKV@figs@subfig
				\ifthenelse{\isempty{\myfigwidth}}{%
					\begin{subfigure}{\textwidth}
				}{%
					\begin{subfigure}{\myfigwidth}
				}%
					\includegraphics[width=\textwidth]{\imgfile}%
					\caption{}%to show the (a), (b) etc
					\label{subfig:#2\arabic{ct}}%
				\end{subfigure}
			\else
				\ifthenelse{\isempty{\myfigwidth}}{%
					\includegraphics{\imgfile}%
				}{%
					\includegraphics[width=\myfigwidth]{\imgfile}%
				}%
			\fi
			\ifthenelse{\cnttest{\value{linectr}}={\perline}}{%
				\\%
				\setcounter{linectr}{0}%
			}{%
				\hfill
			}%
		}%
	}
}%
\makeatother

%-------------------------------------------
% SINGLE SVG to PDF + LaTeX
%-------------------------------------------
% \includesvg[width=0.5\textwidth]{relative_path}
% \includesvg[width=0.5\textwidth,tex]{relative_path}
% \includesvg[width=0.5\textwidth,tex=true]{relative_path}
%
%	or
%
% \includesvg[width=0.5\textwidth,tex=false]{filename}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to .pdf and include .pdf_tex which inputs the produced .pdf
\makeatletter
\define@boolkey{svg}{tex}[true]{}%
\define@key{svg}{width}{%
	\def\svgwidth{#1}
}
\savekeys{svg}{width}
\presetkeys{svg}{%
	width=\textwidth,
	tex=true
}{}

\newcommand\includesvg[2][]{%
	\setkeys{svg}{#1}{
		\ifKV@svg@tex%
			\immediate\write18{inkscape2tex.py -i #2 -m latex-pdf}%
			\ifthenelse{\isempty{\svgwidth}}{%
				\global\let\svgwidth\undefined%
			}{%
				%
			}%
			\IfFileExists{#2.pdf_tex}{%
				\input{#2.pdf_tex}%
			}{%
				{\color{red} FILE #2.pdf_tex NOT FOUND.}%
			}%
		\else%
			\immediate\write18{inkscape2tex.py -i #2 -m pdf}%
			\ifx#1\undefined%
				\includegraphics{#2.pdf}%
			\else%
				\includegraphics[width=\svgwidth]{#2.pdf}%
			\fi%
		\fi%
	}%
}%
\makeatother

%-------------------------------------------
% Wrapper for SVG w/o latex
%-------------------------------------------
% \includesvgpdf[width=0.9\textwidth]{filename}
%
% filename = SVG file name without any extension
%
% export .svg to .pdf and include the produced .pdf
\newcommand{\includesvgpdf}[2][\undefined]{%
	\includesvg[#1,tex=false]{#2}%
}%

%-------------------------------------------
% MULTIPLE SVGs (inside common figure env)
%-------------------------------------------
% \includesvgs[min=1,max=3,perline=1,width=\textwidth,fit]{filename}
%
% width = e.g. \textwidth
% filename = svg path without extension
%
% for i=(i_min) :(i_max -1)
%    figure with ''filename''i''extension''
\makeatletter
\define@boolkey{svgs}{subfig}[true]{}%

\define@boolkey{svgs}{fit}[true]{}%
\define@key{svgs}{min}{%
	\def\ctmin{#1}
}
\define@key{svgs}{max}{%
	\def\ctmax{#1}
}
\define@key{svgs}{perline}{%
	\def\perline{#1}
}
\define@key{svgs}{width}{%
	\def\mysvgwidth{#1}
}
\savekeys{svgs}{fit,min,max,perline,width}

\presetkeys{svgs}{%
	min=0,
	max=1,
	perline=1,
	width=\textwidth,
	subfig=true
}{}

\newcommand\includesvgs[2][]{%
	\setkeys{svgs}{#1}{
		\setcounter{linectr}{0}%
		\forloop{ct}{\ctmin}{\value{ct} < \ctmax}{%
			\stepcounter{linectr}%
			
			\ifKV@svgs@fit
				\begin{adjustbox}{max size={\textwidth}{\textheight}}
					\includesvg{#2\arabic{ct}}%
				\end{adjustbox}
			\else
				\ifKV@svgs@subfig
					\ifthenelse{\isempty{\mysvgwidth}}{%
						\begin{subfigure}{\textwidth}%
					}{%
						\begin{subfigure}{\mysvgwidth}%
					}%
					%
					\includesvg[width=\textwidth]{#2\arabic{ct}}%%
					\caption{}%to show the (a), (b) etc
					\label{subfig:#2\arabic{ct}}%
					\end{subfigure}
				\else
					\ifthenelse{\isempty{\mysvgwidth}}{%
						\includesvg{#2\arabic{ct}}%
					}{%
						\includesvg[width=\mysvgwidth]{#2\arabic{ct}}%
					}%
				\fi
			\fi
			\ifthenelse{\cnttest{\value{linectr}}={\perline}}{%
				\\%
				\setcounter{linectr}{0}%
			}{%
				%
			}%
		}%
	}
}%
\makeatother

%-------------------------------------------
% SINGLE SVG FIGURE
%-------------------------------------------
% \myfigsvg{path}{caption}{width}{label}
%
% path = relative path w/o extension to .svg file w/o .pdf_tex extension
% width = width (e.g. 0.9\textwidth) | empty argument
%
% figure with [width]{svgfile}, caption, fig:label
\newcommand{\myfigsvg}[4]{%
	\begin{figure}%
		\centering%
		\ifthenelse{\isempty{#3}}{%
			\includesvg{#1}%
		}{%
			\includesvg[width=#3]{#1}%
		}%
		\caption{#2}%
		\label{fig:#4}%
	\end{figure}%
}%

%-------------------------------------------
% BEAMER SEQUENCE OF SUPERIMPOSED FIGURES
%-------------------------------------------
% \slideshow[min=0,max=2,ext=.pdf]{./img/fig_}
%
% includes: ./img/fig_0.pdf, ./img/fig_1.pdf
%
% compilation speed is comparable to animate
% the advantage though is avoiding javascript,
% hence the need to use adobe acrobat
\makeatletter
%note: \@anim@@pad borrowed from package animate,
%    cp its def here if you want to be independent from it
\@ifpackageloaded{animate}{%

\define@key{slideshow}{min}{%
	\def\ctmin{#1}
}

\define@key{slideshow}{max}{%
	\def\ctmax{#1}%
}

\define@key{slideshow}{width}{%
	\def\myfigwidth{#1}%
}

\define@key{slideshow}{ext}{%
	\def\myextension{#1}%
}

\savekeys{slideshow}{min,max,width,ext}%

\presetkeys{slideshow}{%
	min=0,
	max=1,
	width=\textwidth,
	ext=.pdf,
}{}
%

%\def\three@digits#1{\ifnum#1>99\else\ifnum#1>9 0\else00\fi\fi\number#1}

\newcounter{slidect}
\newcommand\slideshow[2][]{%
	\setkeys{slideshow}{#1}{
		\setcounter{ct}{\ctmin}
		\setcounter{slidect}{1}
		\includegraphics<\arabic{slidect}->[width=\myfigwidth]{\detokenize{#2}\@anim@pad{\ctmax}{\arabic{ct}}\myextension}%
		%
		\forloop{ct}{\ctmin + 1}{{\value{ct} < \ctmax}}{%
			\stepcounter{slidect}%
			%filename enclosed by {} to avoid issues with periods
			\def\imgfile{\detokenize{#2}\@anim@pad{\ctmax}{\arabic{ct}}\myextension}%
			\llap{\includegraphics<\arabic{slidect}>[width=\myfigwidth]{\imgfile}}%
		}%
	}%
}%
}%

\makeatother

%-------------------------------------------
% BAEAMER: STACKED DOT2TEX GRAPHS
%-------------------------------------------
%
% \animatedot[dot2tex options]{5}{./img/mynice}
%
% 5 = max counter - 1
% mynice0.dot, ..., mynice4.dot
%
\makeatletter
\@ifpackageloaded{dot2texi}{%
\newcommand{\animatedot}[3][]{%
\begin{overprint}%
	\setcounter{ct}{0}%
	\forloop{ct}{0}{\value{ct} < #2}{%
		\setcounter{b}{\value{ct}}%
		\addtocounter{b}{1}%
		\only<\arabic{b}>{%
			\includedot[#1]{#3\arabic{ct}.dot}%
		}%
	}%
\end{overprint}%
}%
}%
\makeatother

%-------------------------------------------
% BEAMER LAYERED FIGURE
%-------------------------------------------
% \includesvglayer[width]{1-2,3-4,5,6}{relative_path}
%
% width = 0.9\textwidth (for example)
% layers2slides = arguments of \onslide<>, e.g. 1-2,3-4,5,6
%                 these are issued by the python script
% path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to multiple .pdf all layer combinations specified within .svg
% and include .pdf_tex produced by python script, which includes individual .pdf_tex files
\newcommand{\includesvglayer}[3][\undefined]{%
	\only<1>{%
		\ifx#1\undefined%
			\immediate\write18{inkscape2scenes.py --scene-order=#2 --file=#3 --overprint=True}%
		\else%
			\immediate\write18{inkscape2scenes.py --width=#1 --scene-order=#2 --file=#3 --overprint=True}%
		\fi%
	}%
	\input{#3.pdf_tex}%
}%

\newcommand{\includesvglayerbare}[3][\undefined]{%
		\ifx#1\undefined%
			\immediate\write18{inkscape2scenes.py --scene-order=#2 --file=#3}%
		\else%
			\immediate\write18{inkscape2scenes.py --width=#1 --scene-order=#2 --file=#3}%
		\fi%
	\input{#3.pdf_tex}%
}%

%-------------------------------------------
% SINGLE DOT via Inkscape SVG + LaTeX
%-------------------------------------------
% \includedotsvg[width]{relative_path}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to DOT file, without its extension
%
% export for LaTeX .dot to .svg then to .pdf and
% include .pdf_tex which inputs the produced .pdf
\newcommand{\includedotsvg}[2][\undefined]{%
	%\immediate\write18{dot #2.dot -Tsvg -o #2.svg}%
	%\includesvg[#1]{#2}%
	%
	\immediate\write18{inkscape2tex.py -i #2 -m dot-svg-latex-pdf}%
	\ifx#1\undefined%
		\global\let\svgwidth\undefined%
	\else%
		\def\svgwidth{#1}%
	\fi%
	\IfFileExists{#2.pdf_tex}{%
		\input{#2.pdf_tex}%
	}{%
		{\color{red} FILE #2.pdf_tex NOT FOUND.}%
	}%
}%

%-------------------------------------------
% SINGLE SVG to EPS + LaTeX
%-------------------------------------------
% \includeps[width]{relative_path}
%
% width = 0.9\textwidth (for example)
% relative_path = relative path to SVG file, without its extension
%
% export for LaTeX .svg to .pdf and include .pdf_tex which inputs the produced .pdf
\newcommand{\includeps}[2][\undefined]{%
	\immediate\write18{inkscape2tex.py -i #2 -m latex-eps}%
	\ifx#1\undefined%
		\global\let\svgwidth\undefined%
	\else%
		\def\svgwidth{#1}%
	\fi%
	\IfFileExists{#2.eps_tex}{%
		\input{#2.eps_tex}%
	}{%
		{\color{red} FILE #2.eps_tex NOT FOUND.}%
	}%
}%

%-------------------------------------------
% SINGLE SVG to EPS
%-------------------------------------------
% \includesvgeps[width=0.9\textwidth]{filename}
%
% filename = SVG file name without any extension
%
% export .svg to .pdf and include the produced .pdf
\newcommand{\includesvgeps}[2][\undefined]{%
	\immediate\write18{inkscape2tex.py -i #2 -m eps}%
	\ifx#1\undefined%
		\includegraphics{#2.eps}%
	\else%
		\includegraphics[#1]{#2.eps}%
	\fi%
}%

%=================
% General Commands
%=================
\providecommand{\mycode}[1]{\texttt{#1}}% code file names style
\def\myparbreak{12pt}% spacing between paragraphs when needed % \vspace{\myparbreak}
\def\myparbrk{\vspace{12pt}}%

%=================
% Paths
%=================
\def\mybibpath{../../bib/}%
\def\mymatlabpath{../../../MATLAB/}%
\def\myavrgccpath{../../../C/avr-gcc-projects/}%
\def\mygccpath{../../../C/gcc-projects/}%

%=================
% Mathematics
%=================
\newcommand{\myvec}[1]{\mathbf{#1}}%
\newcommand{\myvecgr}[1]{\boldsymbol{#1}}%
\newcommand{\mymatr}[1]{\mathrm{#1}}%

\providecommand{\abs}[1]{\left\lvert#1\right\rvert}%
\providecommand{\norm}[1]{\left\|#1\right\|}% \rVert was reviously used
\newcommand{\inner}[3][\undefined]{%
\ifx#1\undefined%
	\left\langle#2,\;#3\right\rangle%
\else%
	\left\langle#2,\;#3\right\rangle_{#1}%
\fi%
}%
\newcommand{\dinner}[3][\undefined]{%
\ifx#1\undefined%
	\left\langle\left\langle#2,\;#3\right\rangle\right\rangle%
\else%
	\left\langle#2,\;#3\right\rangle_{#1}%
\fi%
}%
\DeclareMathOperator*{\cart}{\times}

\newcommand{\transpose}{^\mathrm{T}}%
\newcommand{\tr}{\transpose}%shortcut for transpose command
\newcommand{\trace}[1]{\mathrm{tr}\left(#1\right)}%shortcut

\newcommand{\booleans}{\mathbb{B}}%
\newcommand{\naturals}{\mathbb{N}}%
\newcommand{\integers}{\mathbb{Z}}%
\newcommand{\rationals}{\mathbb{Q}}%
\newcommand{\irrationals}{\reals\setminus\rationals}%
\newcommand{\complexes}{\mathbb{C}}%
\newcommand{\reals}{\mathbb{R}}%
\newcommand{\lspan}[1]{\mathrm{span}\left\{#1\right\}}%
\newcommand{\mspan}[1]{\mathrm{muspan}\left\{#1\right\}}%
\newcommand{\sgn}[1]{\mathrm{sgn}\left\{#1\right\}}%
\newcommand{\floor}[1]{\left\lfloor#1\right\rfloor}%
\newcommand{\ceil}[1]{\left\lceil#1\right\rceil}%

\newcommand{\mat}[1]{%
\begin{bmatrix}%
#1%
\end{bmatrix}%
}

\newcommand{\sumi}[2][n]{\sum_{i=1}^{#1}\left(#2\right)}%
\newcommand{\sumj}[2][n]{\sum_{j=1}^{#1}\left(#2\right)}%
\newcommand{\sumk}[2][n]{\sum_{k=1}^{#1}\left(#2\right)}%

%----------------------------------------------
\newcommand{\myeq}[2][\undefined]{%
	\ifx#1\undefined%
		\begin{equation}%
			\begin{aligned}%
				#2%
			\end{aligned}%
		\end{equation}%
	\else%
		\begin{equation*}%
			\begin{aligned}%
				#2%
			\end{aligned}%
		\end{equation*}%
	\fi%
}%
%----------------------------------------------

\crefname{figure}{Fig.}{Figs.}%
\crefname{subfigure}{Fig.}{Figs.}%

%===================================================
% Some colored box definitions for beamer
\ifx\beamerbutton\undefined%
	%
\else%
	\definecolor{myblue}{rgb}{0.85, 0.89, 0.94}
	\definecolor{question}{rgb}{.99,.77,.81}
	\definecolor{mybrown}{rgb}{.86,.85,.76}
	\definecolor{mygreen}{rgb}{.83,.89,.74}
	\definecolor{myyellow}{rgb}{.96,.97,.58}
	\definecolor{mywhite}{rgb}{1.0,1.0,.79}
	%
	\setbeamercolor{question}{fg=black,bg=question}
	\setbeamercolor{myblue}{fg=black,bg=myblue}
	\setbeamercolor{mybrown}{fg=black,bg=mybrown}
	\setbeamercolor{answer}{fg=black,bg=mygreen}
	\setbeamercolor{mygreen}{fg=black,bg=mygreen}
	\setbeamercolor{myyellow}{fg=black,bg=myyellow}
	%
	\setbeamercolor{block title}{bg=white!90!black,fg=blue}
	\setbeamercolor{block body}{bg=white!95!black,fg=black}
\fi%
